{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","reducers.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardList","robots","cardsComponent","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","height","children","ErrorBoundary","state","hasErrors","console","log","this","error","Component","App","fetch","then","response","json","catch","Error","users","setState","searchField","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","length","connect","dispatch","event","payload","target","value","initialState","Boolean","window","location","hostname","match","store","createStore","action","Object","assign","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sRAceA,EAZF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MACrB,OACI,yBAAKC,UAAU,mDACX,yBAAKC,IAAG,+BAA0BJ,EAA1B,YAAwCK,IAAI,UACpD,6BACI,4BAAKJ,GACL,2BAAIC,MCOLI,EAZE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAETC,EAAiBD,EAAOE,KAAI,SAACC,EAAMC,GAAP,OAC9B,kBAAC,EAAD,CAAMC,IAAKD,EAAGX,GAAIO,EAAOI,GAAGX,GAAIC,KAAMM,EAAOI,GAAGV,KAAMC,MAAOK,EAAOI,GAAGT,WAE3E,OACI,6BACKM,ICKEK,EAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,yBAAKX,UAAU,OACX,2BACIY,KAAK,SACLZ,UAAU,mCACVa,YAAY,gBACZC,SAAUH,MCCXI,EARA,SAACC,GACZ,OACI,yBAAKC,MAAQ,CAACC,UAAW,SAAUC,OAAQ,MACtCH,EAAMI,WCqBJC,E,YAvBX,WAAYL,GAAO,IAAD,8BACd,4CAAMA,KACDM,MAAQ,CACTC,WAAW,GAHD,E,iFAYdC,QAAQC,IAAI,qB,+BAIZ,OAAGC,KAAKJ,MAAMC,UACH,wBAAIvB,UAAU,MAAd,gCAEJ0B,KAAKV,MAAMI,Y,gDAZUO,GAC5B,MAAO,CAAEJ,WAAW,O,GATAK,aCmBtBC,G,kBACF,WAAYb,GAAO,IAAD,8BACd,4CAAMA,KACDM,MAAM,CACPlB,OAAQ,IAHE,E,iFAQE,IAAD,OACfoB,QAAQC,IAAI,qBACZK,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BC,OAAM,SAAAP,GACH,MAAM,IAAIQ,MAAM,sBAEnBJ,MAAK,SAAAK,GAAK,OAAI,EAAKC,SAAS,CAACjC,OAAQgC,S,+BAGrC,IACGhC,EAAWsB,KAAKJ,MAAhBlB,OADJ,EAEoCsB,KAAKV,MAArCsB,EAFJ,EAEIA,YAAaC,EAFjB,EAEiBA,eACfC,EAAiBpC,EAAOqC,QAC1B,SAAAC,GAAU,OAAOA,EAAM5C,KAAK6C,cAAcC,SAASN,EAAYK,kBAEnE,OACI,yBAAK3C,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWW,aAAc4B,IAEH,IAAlBnC,EAAOyC,OAAe,wBAAI7C,UAAU,MAAd,cACtB,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUI,OAAQoC,W,GAjC5BZ,cA4CHkB,eAxDS,SAAAxB,GACpB,MAAO,CACHgB,YAAahB,EAAMgB,gBAIA,SAAAS,GACvB,MAAM,CACFR,eAAgB,SAACS,GAAD,OAAWD,ECfM,CACrCnC,KCH+B,sBDI/BqC,QDauDD,EAAME,OAAOC,YAgDzDL,CAA6CjB,GG/DtDuB,EAAe,CACjBd,YAAa,I,YCSGe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRN,IAAMC,EAAQC,aFJc,WAAoC,IAAnCrC,EAAkC,uDAA5B8B,EAAcQ,EAAc,uDAAP,GACpD,OAAOA,EAAOhD,MACV,IDR2B,sBCSvB,OAAOiD,OAAOC,OAAO,GAAIV,EAAc,CAACd,YAAasB,EAAOX,UAChE,QACI,OAAO3B,MECnByC,IAASC,OAAO,kBAAC,IAAD,CAAUN,MAAOA,GACb,kBAAC,EAAD,OACSO,SAASC,eAAe,SDqH/C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtC,MAAK,SAAAuC,GACjCA,EAAaC,kB","file":"static/js/main.8df471ac.chunk.js","sourcesContent":["import React from 'react'\n\nconst Card = ({id, name, email}) => {\n    return(\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow shadow-5'>\n            <img src={`https://robohash.org/${id}?200x200`} alt='robot'/>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react'\nimport Card from './Card'\n\nconst CardList = ({robots}) => {\n    \n    const cardsComponent = robots.map((user, i) => \n        <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>\n    )\n    return(\n        <div>\n            {cardsComponent}\n        </div> \n    );\n}\n\nexport default CardList;","import React from 'react'\n\nconst SearchBox = ({searchChange}) => {\n    return(\n        <div className='pa2'>\n            <input \n                type='search' \n                className='pa3 ba b--green bg-lightest-blue'\n                placeholder='search robots'\n                onChange={searchChange}\n            />\n        </div>\n    );\n}\n\nexport default SearchBox","import React from 'react'\n\nconst Scroll = (props) => {\n    return(\n        <div style={ {overflowY: 'scroll', height: 800} }>\n            {props.children}\n        </div>\n    );\n}\n\nexport default Scroll;","import React, { Component } from 'react'\n\nclass ErrorBoundary extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            hasErrors: false\n        };\n    }\n\n    static getDerivedStateFromError(error){\n        return { hasErrors: true }\n    }\n\n    componentDidCatch(){\n        console.log('Error occurred.')\n    }\n\n    render(){\n        if(this.state.hasErrors){\n            return <h1 className='f2'>oooppss!!! this is not good.</h1>;\n        }\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","import React, {Component} from 'react'\nimport { connect } from 'react-redux'\nimport CardList from '../components/CardList'\nimport SearchBox from '../components/SearchBox'\nimport Scroll from '../components/Scroll'\nimport ErrorBoundary from '../components/ErrorBoundary'\nimport './App.css';\nimport { setSearchField } from '../actions'\n\nconst mapStateToProps = state => {\n    return {\n        searchField: state.searchField\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return{\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value))\n    }\n}\n\nclass App extends Component  {\n    constructor(props){\n        super(props);\n        this.state={\n            robots: []\n        }\n        \n    }\n\n    componentDidMount(){\n        console.log('componentDidMount')\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response => response.json())\n            .catch(error => {\n                throw new Error('Failed Request.')\n            })\n            .then(users => this.setState({robots: users}));\n    }\n\n    render(){\n        const { robots } = this.state;\n        const { searchField, onSearchChange } = this.props;\n        const filteredRobots = robots.filter(\n            robot => {return robot.name.toLowerCase().includes(searchField.toLowerCase())}\n        );\n        return(\n            <div className='tc'>\n                <h1 className='f1'>robofriends</h1>\n                <SearchBox searchChange={onSearchChange}/>\n                {\n                    robots.length === 0 ? <h1 className='f2'>loading...</h1> :\n                    <Scroll>\n                        <ErrorBoundary>\n                            <CardList robots={filteredRobots} />\n                        </ErrorBoundary>\n                    </Scroll>\n                }\n                \n            </div>\n        );\n    }\n    \n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)","import { CHANGE_SEARCH_FIELD } from './constants'\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n})","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'","import { CHANGE_SEARCH_FIELD } from './constants'\n\nconst initialState = {\n    searchField: ''\n}\n\nexport const searchRobots = (state=initialState, action={}) => {\n    switch(action.type){\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, initialState, {searchField: action.payload})\n        default:\n            return state\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport App from './containers/App'\nimport { searchRobots } from './reducers'\nimport './index.css';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(searchRobots)\n\nReactDOM.render(<Provider store={store}>\n                    <App />\n                </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}